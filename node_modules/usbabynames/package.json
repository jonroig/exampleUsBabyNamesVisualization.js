{
  "name": "usbabynames",
  "version": "1.0.8",
  "description": "Returns data about baby names used in the United States 1880-2014",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Jon Roig",
    "url": "@runnr_az"
  },
  "license": "MIT",
  "dependencies": {
    "promise": "^7.1.1",
    "sqlite3": "^3.1.1"
  },
  "directories": {
    "example": "examples"
  },
  "keywords": [
    "names",
    "baby",
    "census",
    "history",
    "socialsecurity",
    "usgovt",
    "babynames",
    "usa"
  ],
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jonroig/usBabyNames.js.git"
  },
  "bugs": {
    "url": "https://github.com/jonroig/usBabyNames.js/issues"
  },
  "homepage": "https://github.com/jonroig/usBabyNames.js#readme",
  "readme": "# usBabyNames.js\nNode.js / promise-based data provider about name usage of babies born 1880-2014 in the United States of America.\n\n[![NPM version][npm-image]][npm-url]\n\n# About\nBuilt on <a href=\"https://www.ssa.gov/OACT/babynames/limits.html\">the Social Security Administration baby names files</a>, usBabyNames.js returns interesting historical data on baby name usage from 1880-2014. With 1,825,433 total entries packaged within a sqlite3 database, each record contains the following:\n- Name\n- Sex\n- Number of births that year\n- Rank for that year\n\nThis allows you to easily do the following:\n- Identify naming trends based on real data\n- See the top 10 names for a year\n- Track the popularity of a name over time\n- Sort by male vs. female name usage for specific name\n- See the number of children given the name \"Jonathan\" in 1975\n- Calculate the percentage of childen named \"Jonathan\" since 1975\n\n# Install\n```\nnpm install usbabynames --save\n```\n\n# Usage\n``` js\nvar babyNames = require('usbabynames');\n\nvar theNames = babyNames.getByName('jonathan')\n\t.then(function(data){\n\t\tconsole.log('names=',data)\n\t});\n```\n\n# API\n**.getByName(name)** returns name data for all years for a given name\n\n**.getByYear(year)** returns name data for a specific year\n\n**.getById(id)** returns a specific name record by id\n\n**.get(params)** returns filtered name data where params are:\n``` js\n{\n  id: int,\n  name: string,\n  year: int,\n  yearRange: {start: int, end: int},\n  sex: string (M/F),\n  rank: int,\n  rankRange: {start: int, end: int},\n  births: int,\n  birthsRange: {start: int, end: int},\n  unique: boolean\n}\n```\nOutput from all the functions above looks like this:\n``` js\n[ \n\t{ id: 784623,\n\tname: 'jonathan',\n\tsex: 'M',\n\tbirths: 10919,\n\trank: 30,\n\tyear: 1975 } \n]\n```\n**.getNameRankAndBirthsByYear(name, params)** is useful for creating graphs. Params are:\n```\n{\n\tsex: boolean (M/F),\n\tgetEmptyYears: boolean (include years even with 0 births)\n}\n```\nOutput for .getNameRankAndBirthsByYear(\"kanye\") looks like:\n``` js\n{ '2002': { births: 5, rank: 11584 },\n  '2003': { births: 87, rank: 1491 },\n  '2004': { births: 507, rank: 489 },\n  '2005': { births: 202, rank: 893 },\n  '2006': { births: 101, rank: 1503 },\n  '2007': { births: 53, rank: 2425 },\n  '2008': { births: 81, rank: 1815 },\n  '2009': { births: 64, rank: 2128 },\n  '2010': { births: 30, rank: 3575 },\n  '2011': { births: 35, rank: 3200 },\n  '2012': { births: 34, rank: 3262 },\n  '2013': { births: 40, rank: 2861 },\n  '2014': { births: 22, rank: 4429 } }\n```\n\n# US Baby Names Sqlite3 Database\nI've done all the \"hard\" work of exporting all the historical United States birth name data from the original files (/raw_name_source) into a sqlite database. \n\nIf you're into that kind of thing, you can access the sqlite database directly if you like...\n```\nsqlite3 sqlite/us-name-data.sqlite\n\nselect * from usNameData WHERE name = 'jonathan' AND year = 1975 and sex = 'M';\n```\n\n# Why\nWritten over a weekend in early 2016, usBabyNames.js was created when Jon Roig (<a href=\"https://twitter.com/runnr_az\">@runnr_az</a>) found existing baby name data websites / apps / etc... to be totally ridiculous. Since all of these other resources build off the same central resource, <a href=\"https://www.ssa.gov/OACT/babynames/limits.html\">the Social Security Administration baby names files</a>, and I was parsing the data anyway, I thought it'd be fun to learn how to package the whole thing up as an NPM module for anyone to use in the future.\n\n# To Do\nMaybe add the state by state birth records?\n\n\n[npm-image]: https://img.shields.io/npm/v/usbabynames.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/usbabynames\n",
  "readmeFilename": "README.md",
  "gitHead": "55deba2969c012f8ca4b9ed5a26741f079eb8a47",
  "_id": "usbabynames@1.0.8",
  "_shasum": "cc9a70e168ebcca36735821dacae9aa040a6dcd4",
  "_from": "usbabynames@"
}
